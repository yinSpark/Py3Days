# 插入排序算法

# 算法思想
# 把n个待排序的元素看成一个有序表和一个无序表，开始时有序表中只有一个元素，无序表中有n-1个元素；
# 排序过程即每次从无序表中取出第一个元素，将它插入到有序表中，使之成为新的有序表，重复n-1次完成整个排序过程。

# 算法分析
# 0.初始状态 3，1，5，7，2，4，9，6（共8个数）
# 　有序表：3；无序表：1，5，7，2，4，9，6
# 1.第一次循环，从无序表中取出第一个数 1，把它插入到有序表中，使新的数列依旧有序
# 　有序表：1，3；无序表：5，7，2，4，9，6
# 2.第二次循环，从无序表中取出第一个数 5，把它插入到有序表中，使新的数列依旧有序
# 　有序表：1，3，5；无序表：7，2，4，9，6
# 3.第三次循环，从无序表中取出第一个数 7，把它插入到有序表中，使新的数列依旧有序
# 　有序表：1，3，5，7；无序表：2，4，9，6
# 4.第四次循环，从无序表中取出第一个数 2，把它插入到有序表中，使新的数列依旧有序
# 　有序表：1，2，3，5，7；无序表：4，9，6
# 5.第五次循环，从无序表中取出第一个数 4，把它插入到有序表中，使新的数列依旧有序
# 　有序表：1，2，3，4，5，7；无序表：9，6
# 6.第六次循环，从无序表中取出第一个数 9，把它插入到有序表中，使新的数列依旧有序
# 　有序表：1，2，3，4，5，7，9；无序表：6
# 7.第七次循环，从无序表中取出第一个数 6，把它插入到有序表中，使新的数列依旧有序
# 　有序表：1，2，3，4，5，6，7，9；无序表：（空）

# 总结: 循环n-1次,并且插入元素依次和有序列表从后向前进行比较

# 算法实现---直接排序(推荐)

from random import randint
#  生成一个随机array
def random_array(n):
    '''
    :param n: number
    :return: array
    :description: Generate a random array
    '''
    return [randint(0, 50) for _ in range(n)]

def insert_sort(arr):
    n = len(arr)
    # 循环无序列表1~n-1, 有序列表0
    for i in range(1, n):
        # 有序列表最后一位下标j
        j = i-1
        # 假如此时arr[i]<有序列表最后一位,进行交换
        if arr[j] > arr[i]:
            arr[j], arr[i] = arr[i], arr[j]
        # 若此时j=0,说明有序列表只有一个
        # 继续在有序列表进行比较,得到有序列表倒数第二位坐标
        j = j-1
        while arr[j+1] < arr[j] and j >= 0:
            arr[j], arr[j+1] = arr[j+1], arr[j]
            j = j - 1
        print('第{}次循环排序: {}'.format(i, arr))

    print("最终升序排序结果: {}".format(arr))

if __name__ == '__main__':
    arr = random_array(10)
    insert_sort(arr)
